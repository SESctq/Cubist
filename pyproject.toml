[build-system]
build-backend = "setuptools.build_meta"
requires = [
    "setuptools", 
    "wheel", 
    "build", 
    "Cython>=3.0", 
    "numpy"
]

[project]
name = "cubist"
version = "0.1.1"
license = {file = "LICENSE.txt"}

description = "A Python package for fitting Quinlan's Cubist regression model."
authors = [{name = "Patrick Aselin et al."}]
maintainers = [
    {name = "pjaselin"},
]
requires-python = ">=3.8"
readme = "README.md"
classifiers = [
    'Development Status :: 5 - Production/Stable',
    'License :: OSI Approved :: GPLv3 License',
    'Operating System :: Microsoft :: Windows',
    'Operating System :: POSIX',
    'Operating System :: Unix',
    'Operating System :: MacOS',
    'Programming Language :: C',
    'Programming Language :: Python',
    'Programming Language :: Python :: 3.8',
    'Programming Language :: Python :: 3.9',
    'Programming Language :: Python :: 3.10',
    'Programming Language :: Python :: 3.11',
    'Programming Language :: Python :: 3 :: Only',
    'Programming Language :: Python :: Implementation :: CPython',
    'License :: OSI Approved :: GNU General Public License v3 (GPLv3)',
    'Topic :: Software Development',
    'Topic :: Scientific/Engineering',
    'Topic :: Software Development :: Libraries',
    'Topic :: Scientific/Engineering :: Artificial Intelligence',
    'Topic :: Scientific/Engineering :: Mathematics',
    'Intended Audience :: Developers',
    'Intended Audience :: Science/Research'
]

[tool.cibuildwheel]
# Note: the below skip command doesn't do much currently, the platforms to
# build wheels for in CI are controlled in `.github/workflows/wheels.yml` and
# `tools/ci/cirrus_wheels.yml`.
skip = "cp36-* cp37-* cp-38* pp37-* *-manylinux_i686 *_ppc64le *_s390x *-musllinux_aarch64"
build-verbosity = "3"
before-build = "bash {project}/tools/wheels/cibw_before_build.sh {project}"
config-settings = "setup-args=-Duse-ilp64=true setup-args=-Dblas=openblas setup-args=-Dlapack=openblas setup-args=-Dblas-symbol-suffix=64_"
# meson has a hard dependency on ninja, and we need meson to build
# c-extensions in tests. There is a ninja PyPI package used in
# build_requirements.txt for macOS, windows, linux but it cannot be in
# test_requirements.txt since pyodide, which uses test_requirements.txt, does
# not have it.
before-test = "pip install ninja && pip install -r {project}/test_requirements.txt"
test-command = "bash {project}/tools/wheels/cibw_test_command.sh {project}"

[tool.cibuildwheel.linux]
manylinux-x86_64-image = "manylinux2014"
manylinux-aarch64-image = "manylinux2014"
musllinux-x86_64-image = "musllinux_1_1"
environment = {CFLAGS="-fno-strict-aliasing", LDFLAGS="-Wl,--strip-debug", NPY_USE_BLAS_ILP64="1", RUNNER_OS="Linux"}

[tool.cibuildwheel.macos]
# For universal2 wheels, we will need to fuse them manually
# instead of going through cibuildwheel
# This is because cibuildwheel tries to make a fat wheel
# https://github.com/multi-build/multibuild/blame/devel/README.rst#L541-L565
# for more info
archs = "x86_64 arm64"
test-skip = "*_universal2:arm64"
# MACOS linker doesn't support stripping symbols.
# Note that NPY_USE_BLAS_ILP64 is used in `tools/openblas_support.py`.
environment = {CFLAGS="-fno-strict-aliasing", CC="clang", CXX = "clang++", NPY_USE_BLAS_ILP64="1", RUNNER_OS="macOS"}

[tool.cibuildwheel.windows]
environment = {NPY_USE_BLAS_ILP64="1", PKG_CONFIG_PATH="C:/opt/64/lib/pkgconfig"}
config-settings = "setup-args=--vsenv setup-args=-Duse-ilp64=true setup-args=-Dblas=openblas setup-args=-Dlapack=openblas"
repair-wheel-command = "bash ./tools/wheels/repair_windows.sh {wheel} {dest_dir}"

[[tool.cibuildwheel.overrides]]
select = "*-win32"
environment = {PKG_CONFIG_PATH="/opt/32/lib/pkgconfig"}
config-settings = "setup-args=--vsenv setup-args=-Dallow-noblas=true"
repair-wheel-command = ""